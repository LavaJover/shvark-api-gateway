{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "REST API for ShvarkPay",
        "title": "Shvark API Gateway",
        "contact": {},
        "version": "1.0"
    },
    "host": "http://localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/2fa/setup": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Setup 2Fa using Google Authenticator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Setup Google 2FA",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Setup2FAResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/2fa/verify": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Verify 2FA code to enable 2FA for account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify 2FA code",
                "parameters": [
                    {
                        "description": "2FA code",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Verify2FARequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Verify2FAResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/disputes/accept": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Accept active dispute",
                "tags": [
                    "admin"
                ],
                "summary": "Accept active dispute",
                "parameters": [
                    {
                        "description": "accept active dispute by ID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.AcceptDisputeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.AcceptDisputeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/disputes/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Open new dispute",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create dispute",
                "parameters": [
                    {
                        "description": "new dispute data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_admin_request.CreateDisputeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_admin_response.CreateDisputeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/disputes/freeze": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Freeze active dispute",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Freeze active dispute",
                "parameters": [
                    {
                        "description": "dispute to Freeze",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.FreezeDisputeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.FreezeDisputeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/disputes/reject": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reject active dispute",
                "tags": [
                    "admin"
                ],
                "summary": "Reject active dispute",
                "parameters": [
                    {
                        "description": "reject active dispute by ID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RejectDisputeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RejectDisputeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/disputes/{id}": {
            "get": {
                "description": "Get dispute information by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get dispute info by dispute ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dispute ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetDisputeInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/merchants": {
            "get": {
                "description": "Get merchants",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get merchants",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetUsersResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/merchants/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create merchant account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create merchant account",
                "parameters": [
                    {
                        "description": "merchant credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateMerchantRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.CreateMerchantResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/teams/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create new team",
                "parameters": [
                    {
                        "description": "team credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.CreateTeamResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/traders": {
            "get": {
                "description": "Get traders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get traders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetUsersResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/traffic/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create new traffic",
                "parameters": [
                    {
                        "description": "create new traffic",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateTrafficRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.CreateTrafficResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/traffic/edit": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Edit traffic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Edit traffic",
                "parameters": [
                    {
                        "description": "edit traffic",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.EditTrafficRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.EditTrafficResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/traffic/records": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get traffic records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get traffic records",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetTrafficResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/banking/details": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new bank detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "banking"
                ],
                "summary": "Create new bank detail",
                "parameters": [
                    {
                        "description": "New bank details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateBankDetailRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.CreateBankDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update bank detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "banking"
                ],
                "summary": "Update bank detail",
                "parameters": [
                    {
                        "description": "New data for bank detail with given ID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateBankDetailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UpdateBankDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/banking/details/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get bank details by trader ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "banking"
                ],
                "summary": "Get bank details by trader ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "trader uuid",
                        "name": "trader",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetBankDetailsByTraderIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/banking/details/delete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "banking"
                ],
                "summary": "Delete bank detail",
                "parameters": [
                    {
                        "description": "bank detail ID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.DeleteBankDetailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.DeleteBankDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/banking/details/stats/{traderID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get bank details stats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "banking"
                ],
                "summary": "Get bank details stats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "traderID",
                        "name": "traderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetBankDetailsStatsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/banking/details/{uuid}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get bank detail by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "banking"
                ],
                "summary": "Get bank detail by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "bank detail UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetBankDetailByIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Log in user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchant/accounts/balance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get account balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Get balance",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/merchant.GetAccountBalanceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchant/accounts/withdraw/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Withdraw USDT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Withdraw crypto from account wallet",
                "parameters": [
                    {
                        "description": "withdraw data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/merchant.WithdrawRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/merchant.WithdrawResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchant/order/{accountID}/deposit": {
            "post": {
                "description": "Create new pay-in order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Create new deposit order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "merchant account ID",
                        "name": "accountID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "new deposit order details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/merchant.CreatePayInRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/merchant.CreatePayInResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new Pay-In order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create new Pay-In order",
                "parameters": [
                    {
                        "description": "new order details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.CreateOrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/approve": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Approve order by order uuid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Approve order by order uuid",
                "parameters": [
                    {
                        "description": "Order UUID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ApproveOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ApproveOrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/cancel": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel order by order uuid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Cancel order by order uuid",
                "parameters": [
                    {
                        "description": "Order UUID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CancelOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.CancelOrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/disputes/open": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Open order dispute by order uuid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Open order dispute by order uuid",
                "parameters": [
                    {
                        "description": "Order UUID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OpenOrderDisputeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.OpenOrderDisputeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/disputes/resolve": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resolve order dispute by order uuid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Resolve order dispute by order uuid",
                "parameters": [
                    {
                        "description": "Order UUID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ResolveOrderDisputeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ResolveOrderDisputeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/trader/{traderUUID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get orders by trader ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get orders by trader ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trader UUID path param",
                        "name": "traderUUID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "expires_at",
                        "description": "Sort field (amount_fiat, expires_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc, desc)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum amount",
                        "name": "min_amount",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum amount",
                        "name": "max_amount",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Date from (YYYY-MM-DD)",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Date to (YYYY-MM-DD)",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Currency code",
                        "name": "currency",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetOrdersByTraderIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/{uuid}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get order by orderID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get order by orderID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "order UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetOrderByIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payments/in/h2h": {
            "post": {
                "description": "Create new Pay-In using host-to-host method",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Create new H2H Pay-In",
                "parameters": [
                    {
                        "description": "pay-in info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateH2HPayInRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.CreateH2HPayInResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NoBankDetailsErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payments/in/h2h/{id}": {
            "get": {
                "description": "Get host-to-host pay-in order info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Get H2h Pay-in info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "order id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetH2HPayInInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payments/in/h2h/{id}/arbitrage/info": {
            "get": {
                "description": "Get dispute info by disputeID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Get info about dispute",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dispute id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetPayInArbitrageInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payments/in/h2h/{id}/arbitrage/link": {
            "post": {
                "description": "Opent dispute by order id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Open dispute for given order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "dispute description",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_payment_request.CreateDisputeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_payment_response.CreateDisputeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payments/in/h2h/{id}/cancel": {
            "post": {
                "description": "Cancel Pay in order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Cancel Pay In order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.CancelPayInResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profiles/{uuid}": {
            "get": {
                "description": "Get profile by uuid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profiles"
                ],
                "summary": "Get profile by uuid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Profile uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetProfileByIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rbac/permissions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check user permission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Check user permission",
                "parameters": [
                    {
                        "description": "Permission subject, object, action",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CheckPermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.CheckPermissionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rbac/policies": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add policy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Add policy",
                "parameters": [
                    {
                        "description": "New policy details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.AddPolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.AddPolicyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete policy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Delete policy",
                "parameters": [
                    {
                        "description": "Policy details to delete",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.DeletePolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.DeletePolicyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rbac/roles": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Assign role",
                "parameters": [
                    {
                        "description": "Role assigned to user",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.AssignRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.AssignRoleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Revoke role",
                "parameters": [
                    {
                        "description": "Role assigned to user to revoke",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RevokeRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RevokeRoleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Creating new account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Registration credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get user by UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetUserByIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/validate_token": {
            "post": {
                "description": "Check if JWT is valid or not",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "JWT validation check-point",
                "parameters": [
                    {
                        "description": "JWT instance",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ValidateTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ValidateTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Create new wallet",
                "parameters": [
                    {
                        "description": "New wallet data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateWalletRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.CreateWalletErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.CreateWalletErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.CreateWalletErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/deposit": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deposit crypto off chain",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Deposit crypto off-chain",
                "parameters": [
                    {
                        "description": "wallet data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.DepositRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.DepositResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.DepositErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.DepositErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/response.DepositErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/freeze": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Freeze crypto",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Freeze crypto",
                "parameters": [
                    {
                        "description": "wallet data",
                        "name": "imput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.FreezeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.FreezeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.FreezeErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.FreezeErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/response.FreezeErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/release": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Release crypto",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Release crypto",
                "parameters": [
                    {
                        "description": "wallet data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ReleaseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ReleaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ReleaseErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ReleaseErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/response.ReleaseErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/withdraw": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Withdraw crypto",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Withdraw crypto",
                "parameters": [
                    {
                        "description": "wallet data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.WithdrawRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.WithdrawResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.WithdrawErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.WithdrawErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/response.WithdrawErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{traderID}/address": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get trader crypto wallet address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Get trader crypto wallet address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TraderID",
                        "name": "traderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderWalletAddressResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderWalletAddressErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderWalletAddressErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderWalletAddressErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{traderID}/balance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get trader crypto balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Get trader crypto balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TraderID",
                        "name": "traderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderBalanceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderBalanceErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderBalanceErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderBalanceErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{traderID}/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get trader transaction history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Get trader transactions history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TraderID",
                        "name": "traderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderHistoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderHistoryErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderHistoryErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/response.GetTraderHistoryErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_admin_request.CreateDisputeRequest": {
            "type": "object",
            "properties": {
                "dispute_reason": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "proof_url": {
                    "type": "string"
                },
                "ttl": {
                    "type": "string"
                }
            }
        },
        "github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_admin_response.CreateDisputeResponse": {
            "type": "object",
            "properties": {
                "dispute_id": {
                    "type": "string"
                }
            }
        },
        "github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_admin_response.Dispute": {
            "type": "object",
            "properties": {
                "dispute_id": {
                    "type": "string"
                },
                "dispute_reason": {
                    "type": "string"
                },
                "dispute_status": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "proof_url": {
                    "type": "string"
                }
            }
        },
        "github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_banking_response.BankDetail": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "type": "string"
                },
                "bank_name": {
                    "type": "string"
                },
                "card_number": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "delay": {
                    "type": "integer"
                },
                "device_id": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "inflow_currency": {
                    "type": "string"
                },
                "max_amount": {
                    "type": "number"
                },
                "max_amount_day": {
                    "type": "number"
                },
                "max_amount_month": {
                    "type": "number"
                },
                "max_orders_simultaneosly": {
                    "type": "integer"
                },
                "max_quantity_day": {
                    "type": "integer"
                },
                "max_quantity_month": {
                    "type": "integer"
                },
                "min_amount": {
                    "type": "number"
                },
                "nspk_code": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "payment_system": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "trader_id": {
                    "type": "string"
                }
            }
        },
        "github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_order_response.BankDetail": {
            "type": "object",
            "properties": {
                "bank_name": {
                    "type": "string"
                },
                "card_number": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "delay": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "max_amount": {
                    "type": "number"
                },
                "min_amount": {
                    "type": "number"
                },
                "owner": {
                    "type": "string"
                },
                "payment_system": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "trader_id": {
                    "type": "string"
                }
            }
        },
        "github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_payment_request.CreateDisputeRequest": {
            "type": "object",
            "properties": {
                "proof_url": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_payment_response.CreateDisputeResponse": {
            "type": "object",
            "properties": {
                "dispute_id": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                }
            }
        },
        "github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_payment_response.Dispute": {
            "type": "object",
            "properties": {
                "dispute_id": {
                    "type": "string"
                },
                "dispute_reason": {
                    "type": "string"
                },
                "dispute_status": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "proof_url": {
                    "type": "string"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "invalid data"
                }
            }
        },
        "merchant.AccountBalance": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "merchant.CreatePayInRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "callbackUrl": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "isSbp": {
                    "type": "boolean"
                },
                "issuer": {
                    "type": "string"
                },
                "iternalId": {
                    "type": "string"
                },
                "nspkCode": {
                    "type": "string"
                }
            }
        },
        "merchant.CreatePayInResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "amountByCurrency": {
                    "type": "number"
                },
                "cardNumber": {
                    "type": "string"
                },
                "currencyRate": {
                    "type": "number"
                },
                "holderName": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "nspkCode": {
                    "type": "string"
                },
                "orderId": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "timeExpires": {
                    "type": "integer"
                }
            }
        },
        "merchant.GetAccountBalanceResponse": {
            "type": "object",
            "properties": {
                "balances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/merchant.AccountBalance"
                    }
                }
            }
        },
        "merchant.WithdrawRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "toAddress": {
                    "type": "string"
                }
            }
        },
        "merchant.WithdrawResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "toAddress": {
                    "type": "string"
                },
                "txHash": {
                    "type": "string"
                }
            }
        },
        "request.AcceptDisputeRequest": {
            "type": "object",
            "properties": {
                "dispute_id": {
                    "type": "string"
                }
            }
        },
        "request.AddPolicyRequest": {
            "type": "object",
            "required": [
                "action",
                "object",
                "role"
            ],
            "properties": {
                "action": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "request.ApproveOrderRequest": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "request.AssignRoleRequest": {
            "type": "object",
            "required": [
                "role",
                "user_id"
            ],
            "properties": {
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "request.BankDetail": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "type": "string"
                },
                "bank_name": {
                    "type": "string"
                },
                "card_number": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "delay": {
                    "type": "string"
                },
                "device_id": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "inflow_currency": {
                    "type": "string"
                },
                "max_amount": {
                    "type": "number"
                },
                "max_amount_day": {
                    "type": "number"
                },
                "max_amount_month": {
                    "type": "number"
                },
                "max_orders_simultaneosly": {
                    "type": "integer"
                },
                "max_quantity_day": {
                    "type": "integer"
                },
                "max_quantity_month": {
                    "type": "integer"
                },
                "min_amount": {
                    "type": "number"
                },
                "nspk_code": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "payment_system": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "trader_id": {
                    "type": "string"
                }
            }
        },
        "request.CancelOrderRequest": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "request.CheckPermissionRequest": {
            "type": "object",
            "required": [
                "action",
                "object",
                "user_id"
            ],
            "properties": {
                "action": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "request.CreateBankDetailRequest": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "type": "string"
                },
                "bank_name": {
                    "type": "string"
                },
                "card_number": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "delay": {
                    "type": "string",
                    "example": "100s"
                },
                "device_id": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "inflow_currency": {
                    "type": "string"
                },
                "max_amount": {
                    "type": "number"
                },
                "max_amount_day": {
                    "type": "number"
                },
                "max_amount_month": {
                    "type": "number"
                },
                "max_orders_simultaneosly": {
                    "type": "integer"
                },
                "max_quantity_day": {
                    "type": "integer"
                },
                "max_quantity_month": {
                    "type": "integer"
                },
                "min_amount": {
                    "type": "number"
                },
                "nspk_code": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "payment_system": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "trader_id": {
                    "type": "string"
                }
            }
        },
        "request.CreateH2HPayInRequest": {
            "type": "object",
            "properties": {
                "amount_fiat": {
                    "type": "number"
                },
                "callback_url": {
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "ftd": {
                    "type": "boolean"
                },
                "merchant_id": {
                    "type": "string"
                },
                "merchant_order_id": {
                    "type": "string"
                },
                "payment_system": {
                    "type": "string"
                },
                "shuffle": {
                    "type": "integer"
                },
                "ttl": {
                    "type": "string"
                }
            }
        },
        "request.CreateMerchantRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "request.CreateOrderRequest": {
            "type": "object",
            "properties": {
                "amount_fiat": {
                    "type": "number"
                },
                "client_id": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "merchant_order_id": {
                    "type": "string"
                },
                "payment_system": {
                    "type": "string"
                },
                "shuffle": {
                    "type": "integer"
                },
                "ttl": {
                    "type": "string"
                }
            }
        },
        "request.CreateTeamRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "request.CreateTrafficRequest": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "merchant_id": {
                    "type": "string"
                },
                "platform_fee": {
                    "type": "number"
                },
                "trader_id": {
                    "type": "string"
                },
                "trader_priority": {
                    "type": "number"
                },
                "trader_reward": {
                    "type": "number"
                }
            }
        },
        "request.CreateWalletRequest": {
            "type": "object",
            "properties": {
                "traderId": {
                    "type": "string"
                }
            }
        },
        "request.DeleteBankDetailRequest": {
            "type": "object",
            "properties": {
                "bank_detail_id": {
                    "type": "string"
                }
            }
        },
        "request.DeletePolicyRequest": {
            "type": "object",
            "required": [
                "action",
                "object",
                "role"
            ],
            "properties": {
                "action": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "request.DepositRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "traderId": {
                    "type": "string"
                },
                "txHash": {
                    "type": "string"
                }
            }
        },
        "request.EditTrafficRequest": {
            "type": "object",
            "properties": {
                "traffic": {
                    "$ref": "#/definitions/request.Traffic"
                }
            }
        },
        "request.FreezeDisputeRequest": {
            "type": "object",
            "properties": {
                "dispute_id": {
                    "type": "string"
                }
            }
        },
        "request.FreezeRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "orderId": {
                    "type": "string"
                },
                "traderId": {
                    "type": "string"
                }
            }
        },
        "request.LoginRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "CoolUserLogin"
                },
                "password": {
                    "type": "string",
                    "example": "securepass123"
                },
                "two_fa_code": {
                    "type": "string"
                }
            }
        },
        "request.OpenOrderDisputeRequest": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "request.RegisterRequest": {
            "type": "object",
            "required": [
                "login",
                "password",
                "username"
            ],
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "request.RejectDisputeRequest": {
            "type": "object",
            "properties": {
                "dispute_id": {
                    "type": "string"
                }
            }
        },
        "request.ReleaseRequest": {
            "type": "object",
            "properties": {
                "orderId": {
                    "type": "string"
                },
                "rewardPercent": {
                    "type": "number"
                },
                "traderId": {
                    "type": "string"
                }
            }
        },
        "request.ResolveOrderDisputeRequest": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "request.RevokeRoleRequest": {
            "type": "object",
            "required": [
                "role",
                "user_id"
            ],
            "properties": {
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "request.Traffic": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "platform_fee": {
                    "type": "number"
                },
                "trader_id": {
                    "type": "string"
                },
                "trader_priority": {
                    "type": "number"
                },
                "trader_reward": {
                    "type": "number"
                }
            }
        },
        "request.UpdateBankDetailRequest": {
            "type": "object",
            "properties": {
                "bank_detail": {
                    "$ref": "#/definitions/request.BankDetail"
                }
            }
        },
        "request.ValidateTokenRequest": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "request.Verify2FARequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "request.WithdrawRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "toAddress": {
                    "type": "string"
                },
                "traderId": {
                    "type": "string"
                }
            }
        },
        "response.AcceptDisputeResponse": {
            "type": "object"
        },
        "response.AddPolicyResponse": {
            "type": "object",
            "required": [
                "success"
            ],
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.ApproveOrderResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "response.AssignRoleResponse": {
            "type": "object",
            "required": [
                "success"
            ],
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.BadRequestErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "response.BankDetailStat": {
            "type": "object",
            "properties": {
                "bank_detail_id": {
                    "type": "string"
                },
                "current_amount_month": {
                    "type": "number"
                },
                "current_amount_today": {
                    "type": "number"
                },
                "current_count_month": {
                    "type": "integer"
                },
                "current_count_today": {
                    "type": "integer"
                }
            }
        },
        "response.CancelOrderResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "response.CancelPayInResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "response.CheckPermissionResponse": {
            "type": "object",
            "required": [
                "allowed"
            ],
            "properties": {
                "allowed": {
                    "type": "boolean"
                }
            }
        },
        "response.CreateBankDetailResponse": {
            "type": "object",
            "properties": {
                "bank_detail_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.CreateH2HPayInResponse": {
            "type": "object",
            "properties": {
                "amount_crypto": {
                    "type": "number"
                },
                "amount_fiat": {
                    "type": "number"
                },
                "callback_url": {
                    "type": "string"
                },
                "crypto_rub_rate": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "integer"
                },
                "merchant_order_id": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "payment_details": {
                    "$ref": "#/definitions/response.PaymentDetails"
                },
                "payment_system": {
                    "type": "string"
                },
                "recalculated": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "tpay_link": {
                    "type": "string"
                }
            }
        },
        "response.CreateMerchantResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "wallet_address": {
                    "type": "string"
                }
            }
        },
        "response.CreateOrderResponse": {
            "type": "object",
            "properties": {
                "amount_crypto": {
                    "type": "number"
                },
                "amount_fiat": {
                    "type": "number"
                },
                "bank_detail": {
                    "$ref": "#/definitions/github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_order_response.BankDetail"
                },
                "order_id": {
                    "type": "string"
                },
                "order_status": {
                    "type": "string"
                }
            }
        },
        "response.CreateTeamResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "trader_id": {
                    "type": "string"
                },
                "wallet_address": {
                    "type": "string"
                }
            }
        },
        "response.CreateTrafficResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "response.CreateWalletErrorResponse": {
            "type": "object"
        },
        "response.DeleteBankDetailResponse": {
            "type": "object",
            "properties": {
                "bank_detail": {
                    "$ref": "#/definitions/github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_banking_response.BankDetail"
                }
            }
        },
        "response.DeletePolicyResponse": {
            "type": "object",
            "required": [
                "success"
            ],
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.DepositErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Wallet not found"
                }
            }
        },
        "response.DepositResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.EditTrafficResponse": {
            "type": "object"
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "response.FreezeDisputeResponse": {
            "type": "object"
        },
        "response.FreezeErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Insufficient balance"
                }
            }
        },
        "response.FreezeResponse": {
            "type": "object",
            "properties": {
                "frozen": {
                    "type": "number"
                }
            }
        },
        "response.GetBankDetailByIDResponse": {
            "type": "object",
            "properties": {
                "bank_detail": {
                    "$ref": "#/definitions/github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_banking_response.BankDetail"
                }
            }
        },
        "response.GetBankDetailsByTraderIDResponse": {
            "type": "object",
            "properties": {
                "bank_details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_banking_response.BankDetail"
                    }
                }
            }
        },
        "response.GetBankDetailsStatsResponse": {
            "type": "object",
            "properties": {
                "stats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.BankDetailStat"
                    }
                }
            }
        },
        "response.GetDisputeInfoResponse": {
            "type": "object",
            "properties": {
                "dispute": {
                    "$ref": "#/definitions/github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_admin_response.Dispute"
                }
            }
        },
        "response.GetH2HPayInInfoResponse": {
            "type": "object",
            "properties": {
                "amount_crypto": {
                    "type": "number"
                },
                "amount_fiat": {
                    "type": "number"
                },
                "callback_url": {
                    "type": "string"
                },
                "crypto_rub_rate": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "integer"
                },
                "merchant_order_id": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "payment_details": {
                    "$ref": "#/definitions/response.PaymentDetails"
                },
                "payment_system": {
                    "type": "string"
                },
                "recalculated": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "tpay_link": {
                    "type": "string"
                }
            }
        },
        "response.GetOrderByIDResponse": {
            "type": "object",
            "properties": {
                "order": {
                    "$ref": "#/definitions/response.Order"
                }
            }
        },
        "response.GetOrdersByTraderIDResponse": {
            "type": "object",
            "properties": {
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.Order"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/response.Pagination"
                }
            }
        },
        "response.GetPayInArbitrageInfoResponse": {
            "type": "object",
            "properties": {
                "dispute": {
                    "$ref": "#/definitions/github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_payment_response.Dispute"
                }
            }
        },
        "response.GetProfileByIDResponse": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "profile_id": {
                    "type": "string"
                },
                "tg_link": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "response.GetTraderBalanceErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "response.GetTraderBalanceResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "balance": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "frozen": {
                    "type": "number"
                },
                "traderId": {
                    "type": "string"
                }
            }
        },
        "response.GetTraderHistoryErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "response.GetTraderHistoryResponse": {
            "type": "object",
            "properties": {
                "history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.Transaction"
                    }
                }
            }
        },
        "response.GetTraderWalletAddressErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "response.GetTraderWalletAddressResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                }
            }
        },
        "response.GetTrafficResponse": {
            "type": "object",
            "properties": {
                "traffic_records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.Traffic"
                    }
                }
            }
        },
        "response.GetUserByIDResponse": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "response.GetUsersResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.User"
                    }
                }
            }
        },
        "response.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "response.NoBankDetailsErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "response.OpenOrderDisputeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "response.Order": {
            "type": "object",
            "properties": {
                "amount_crypto": {
                    "type": "number"
                },
                "amount_fiat": {
                    "type": "number"
                },
                "bank_detail": {
                    "$ref": "#/definitions/github_com_LavaJover_shvark-api-gateway_internal_delivery_http_dto_order_response.BankDetail"
                },
                "created_at": {
                    "type": "string"
                },
                "crypto_rub_rate": {
                    "type": "number"
                },
                "expires_at": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "trader_reward": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "response.Pagination": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "items_per_page": {
                    "type": "integer"
                },
                "total_items": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "response.PaymentDetails": {
            "type": "object",
            "properties": {
                "bank": {
                    "description": "User-friendly",
                    "type": "string"
                },
                "bank_id": {
                    "description": "In SBP system",
                    "type": "string"
                },
                "bank_name": {
                    "type": "string"
                },
                "card_number": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "response.RegisterResponse": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string",
                    "example": "1d6ab366-4fca-4bcc-972d-875c35ea939a"
                }
            }
        },
        "response.RejectDisputeResponse": {
            "type": "object"
        },
        "response.ReleaseErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "response.ReleaseResponse": {
            "type": "object",
            "properties": {
                "released": {
                    "type": "number"
                },
                "reward": {
                    "type": "number"
                }
            }
        },
        "response.ResolveOrderDisputeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "response.RevokeRoleResponse": {
            "type": "object",
            "required": [
                "success"
            ],
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.Setup2FAResponse": {
            "type": "object",
            "properties": {
                "qr_url": {
                    "type": "string"
                }
            }
        },
        "response.Traffic": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "platform_fee": {
                    "type": "number"
                },
                "trader_id": {
                    "type": "string"
                },
                "trader_priority": {
                    "type": "number"
                },
                "trader_reward": {
                    "type": "number"
                }
            }
        },
        "response.Transaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "orderId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "traderId": {
                    "type": "string"
                },
                "txHash": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "response.UpdateBankDetailResponse": {
            "type": "object"
        },
        "response.User": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "response.ValidateTokenResponse": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string",
                    "example": "1d6ab366-4fca-4bcc-972d-875c35ea939a"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "response.Verify2FAResponse": {
            "type": "object"
        },
        "response.WithdrawErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "response.WithdrawResponse": {
            "type": "object",
            "properties": {
                "txid": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}